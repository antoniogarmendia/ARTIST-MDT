/*
* generated by Xtext
*/
package eu.artist.migration.mdt.database.sql.editor.ui.contentassist.antlr;

import java.util.Collection;
import java.util.Map;
import java.util.HashMap;

import org.antlr.runtime.RecognitionException;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.AbstractContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.FollowElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;

import com.google.inject.Inject;

import eu.artist.migration.mdt.database.sql.editor.services.SQLDSLGrammarAccess;

public class SQLDSLParser extends AbstractContentAssistParser {
	
	@Inject
	private SQLDSLGrammarAccess grammarAccess;
	
	private Map<AbstractElement, String> nameMappings;
	
	@Override
	protected eu.artist.migration.mdt.database.sql.editor.ui.contentassist.antlr.internal.InternalSQLDSLParser createParser() {
		eu.artist.migration.mdt.database.sql.editor.ui.contentassist.antlr.internal.InternalSQLDSLParser result = new eu.artist.migration.mdt.database.sql.editor.ui.contentassist.antlr.internal.InternalSQLDSLParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}
	
	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getFieldAccess().getValueAlternatives_1_0(), "rule__Field__ValueAlternatives_1_0");
					put(grammarAccess.getFieldAccess().getValueAlternatives_1_0_1(), "rule__Field__ValueAlternatives_1_0_1");
					put(grammarAccess.getOtherAccess().getAlternatives(), "rule__Other__Alternatives");
					put(grammarAccess.getModelAccess().getGroup(), "rule__Model__Group__0");
					put(grammarAccess.getInsertSQLAccess().getGroup(), "rule__InsertSQL__Group__0");
					put(grammarAccess.getInsertSQLAccess().getGroup_2(), "rule__InsertSQL__Group_2__0");
					put(grammarAccess.getInsertSQLAccess().getGroup_2_7(), "rule__InsertSQL__Group_2_7__0");
					put(grammarAccess.getInsertSQLAccess().getGroup_2_14(), "rule__InsertSQL__Group_2_14__0");
					put(grammarAccess.getDatabaseAccess().getGroup(), "rule__Database__Group__0");
					put(grammarAccess.getTabAccess().getGroup(), "rule__Tab__Group__0");
					put(grammarAccess.getColumnAccess().getGroup(), "rule__Column__Group__0");
					put(grammarAccess.getFieldAccess().getGroup(), "rule__Field__Group__0");
					put(grammarAccess.getModelAccess().getInsertSQLAssignment_2(), "rule__Model__InsertSQLAssignment_2");
					put(grammarAccess.getInsertSQLAccess().getDatabaseAssignment_2_1(), "rule__InsertSQL__DatabaseAssignment_2_1");
					put(grammarAccess.getInsertSQLAccess().getTabAssignment_2_3(), "rule__InsertSQL__TabAssignment_2_3");
					put(grammarAccess.getInsertSQLAccess().getColumnsAssignment_2_6(), "rule__InsertSQL__ColumnsAssignment_2_6");
					put(grammarAccess.getInsertSQLAccess().getColumnsAssignment_2_7_3(), "rule__InsertSQL__ColumnsAssignment_2_7_3");
					put(grammarAccess.getInsertSQLAccess().getFieldsAssignment_2_13(), "rule__InsertSQL__FieldsAssignment_2_13");
					put(grammarAccess.getInsertSQLAccess().getFieldsAssignment_2_14_3(), "rule__InsertSQL__FieldsAssignment_2_14_3");
					put(grammarAccess.getDatabaseAccess().getValueAssignment_2(), "rule__Database__ValueAssignment_2");
					put(grammarAccess.getTabAccess().getValueAssignment_2(), "rule__Tab__ValueAssignment_2");
					put(grammarAccess.getColumnAccess().getValueAssignment_2(), "rule__Column__ValueAssignment_2");
					put(grammarAccess.getFieldAccess().getValueAssignment_1(), "rule__Field__ValueAssignment_1");
				}
			};
		}
		return nameMappings.get(element);
	}
	
	@Override
	protected Collection<FollowElement> getFollowElements(AbstractInternalContentAssistParser parser) {
		try {
			eu.artist.migration.mdt.database.sql.editor.ui.contentassist.antlr.internal.InternalSQLDSLParser typedParser = (eu.artist.migration.mdt.database.sql.editor.ui.contentassist.antlr.internal.InternalSQLDSLParser) parser;
			typedParser.entryRuleModel();
			return typedParser.getFollowElements();
		} catch(RecognitionException ex) {
			throw new RuntimeException(ex);
		}		
	}
	
	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}
	
	public SQLDSLGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}
	
	public void setGrammarAccess(SQLDSLGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
