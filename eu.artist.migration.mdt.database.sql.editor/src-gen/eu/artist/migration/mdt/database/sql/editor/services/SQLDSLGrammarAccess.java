/*
* generated by Xtext
*/
package eu.artist.migration.mdt.database.sql.editor.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class SQLDSLGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Model");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cModelAction_0 = (Action)cGroup.eContents().get(0);
		private final RuleCall cOtherParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Assignment cInsertSQLAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cInsertSQLInsertSQLParserRuleCall_2_0 = (RuleCall)cInsertSQLAssignment_2.eContents().get(0);
		
		//Model:
		//	{Model} other* insertSQL+=InsertSQL*;
		public ParserRule getRule() { return rule; }

		//{Model} other* insertSQL+=InsertSQL*
		public Group getGroup() { return cGroup; }

		//{Model}
		public Action getModelAction_0() { return cModelAction_0; }

		//other*
		public RuleCall getOtherParserRuleCall_1() { return cOtherParserRuleCall_1; }

		//insertSQL+=InsertSQL*
		public Assignment getInsertSQLAssignment_2() { return cInsertSQLAssignment_2; }

		//InsertSQL
		public RuleCall getInsertSQLInsertSQLParserRuleCall_2_0() { return cInsertSQLInsertSQLParserRuleCall_2_0; }
	}

	public class InsertSQLElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "InsertSQL");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cInsertSQLAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cINSERTKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final RuleCall cSpaceParserRuleCall_2_0 = (RuleCall)cGroup_2.eContents().get(0);
		private final Assignment cDatabaseAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cDatabaseDatabaseParserRuleCall_2_1_0 = (RuleCall)cDatabaseAssignment_2_1.eContents().get(0);
		private final Keyword cFullStopKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		private final Assignment cTabAssignment_2_3 = (Assignment)cGroup_2.eContents().get(3);
		private final RuleCall cTabTabParserRuleCall_2_3_0 = (RuleCall)cTabAssignment_2_3.eContents().get(0);
		private final RuleCall cSpaceParserRuleCall_2_4 = (RuleCall)cGroup_2.eContents().get(4);
		private final Keyword cLeftParenthesisKeyword_2_5 = (Keyword)cGroup_2.eContents().get(5);
		private final Assignment cColumnsAssignment_2_6 = (Assignment)cGroup_2.eContents().get(6);
		private final RuleCall cColumnsColumnParserRuleCall_2_6_0 = (RuleCall)cColumnsAssignment_2_6.eContents().get(0);
		private final Group cGroup_2_7 = (Group)cGroup_2.eContents().get(7);
		private final RuleCall cSpaceParserRuleCall_2_7_0 = (RuleCall)cGroup_2_7.eContents().get(0);
		private final Keyword cCommaKeyword_2_7_1 = (Keyword)cGroup_2_7.eContents().get(1);
		private final RuleCall cSpaceParserRuleCall_2_7_2 = (RuleCall)cGroup_2_7.eContents().get(2);
		private final Assignment cColumnsAssignment_2_7_3 = (Assignment)cGroup_2_7.eContents().get(3);
		private final RuleCall cColumnsColumnParserRuleCall_2_7_3_0 = (RuleCall)cColumnsAssignment_2_7_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2_8 = (Keyword)cGroup_2.eContents().get(8);
		private final RuleCall cSpaceParserRuleCall_2_9 = (RuleCall)cGroup_2.eContents().get(9);
		private final Keyword cVALUESKeyword_2_10 = (Keyword)cGroup_2.eContents().get(10);
		private final RuleCall cSpaceParserRuleCall_2_11 = (RuleCall)cGroup_2.eContents().get(11);
		private final Keyword cLeftParenthesisKeyword_2_12 = (Keyword)cGroup_2.eContents().get(12);
		private final Assignment cFieldsAssignment_2_13 = (Assignment)cGroup_2.eContents().get(13);
		private final RuleCall cFieldsFieldParserRuleCall_2_13_0 = (RuleCall)cFieldsAssignment_2_13.eContents().get(0);
		private final Group cGroup_2_14 = (Group)cGroup_2.eContents().get(14);
		private final RuleCall cSpaceParserRuleCall_2_14_0 = (RuleCall)cGroup_2_14.eContents().get(0);
		private final Keyword cCommaKeyword_2_14_1 = (Keyword)cGroup_2_14.eContents().get(1);
		private final RuleCall cSpaceParserRuleCall_2_14_2 = (RuleCall)cGroup_2_14.eContents().get(2);
		private final Assignment cFieldsAssignment_2_14_3 = (Assignment)cGroup_2_14.eContents().get(3);
		private final RuleCall cFieldsFieldParserRuleCall_2_14_3_0 = (RuleCall)cFieldsAssignment_2_14_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2_15 = (Keyword)cGroup_2.eContents().get(15);
		private final RuleCall cOtherParserRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		
		//InsertSQL:
		//	{InsertSQL} "INSERT" (Space database=Database "." tab=Tab Space "(" columns+=Column (Space "," Space
		//	columns+=Column)* ")" Space "VALUES" Space "(" fields+=Field (Space "," Space fields+=Field)* ")") other*;
		public ParserRule getRule() { return rule; }

		//{InsertSQL} "INSERT" (Space database=Database "." tab=Tab Space "(" columns+=Column (Space "," Space columns+=Column)*
		//")" Space "VALUES" Space "(" fields+=Field (Space "," Space fields+=Field)* ")") other*
		public Group getGroup() { return cGroup; }

		//{InsertSQL}
		public Action getInsertSQLAction_0() { return cInsertSQLAction_0; }

		//"INSERT"
		public Keyword getINSERTKeyword_1() { return cINSERTKeyword_1; }

		//Space database=Database "." tab=Tab Space "(" columns+=Column (Space "," Space columns+=Column)* ")" Space "VALUES"
		//Space "(" fields+=Field (Space "," Space fields+=Field)* ")"
		public Group getGroup_2() { return cGroup_2; }

		//Space
		public RuleCall getSpaceParserRuleCall_2_0() { return cSpaceParserRuleCall_2_0; }

		//database=Database
		public Assignment getDatabaseAssignment_2_1() { return cDatabaseAssignment_2_1; }

		//Database
		public RuleCall getDatabaseDatabaseParserRuleCall_2_1_0() { return cDatabaseDatabaseParserRuleCall_2_1_0; }

		//"."
		public Keyword getFullStopKeyword_2_2() { return cFullStopKeyword_2_2; }

		//tab=Tab
		public Assignment getTabAssignment_2_3() { return cTabAssignment_2_3; }

		//Tab
		public RuleCall getTabTabParserRuleCall_2_3_0() { return cTabTabParserRuleCall_2_3_0; }

		//Space
		public RuleCall getSpaceParserRuleCall_2_4() { return cSpaceParserRuleCall_2_4; }

		//"("
		public Keyword getLeftParenthesisKeyword_2_5() { return cLeftParenthesisKeyword_2_5; }

		//columns+=Column
		public Assignment getColumnsAssignment_2_6() { return cColumnsAssignment_2_6; }

		//Column
		public RuleCall getColumnsColumnParserRuleCall_2_6_0() { return cColumnsColumnParserRuleCall_2_6_0; }

		//(Space "," Space columns+=Column)*
		public Group getGroup_2_7() { return cGroup_2_7; }

		//Space
		public RuleCall getSpaceParserRuleCall_2_7_0() { return cSpaceParserRuleCall_2_7_0; }

		//","
		public Keyword getCommaKeyword_2_7_1() { return cCommaKeyword_2_7_1; }

		//Space
		public RuleCall getSpaceParserRuleCall_2_7_2() { return cSpaceParserRuleCall_2_7_2; }

		//columns+=Column
		public Assignment getColumnsAssignment_2_7_3() { return cColumnsAssignment_2_7_3; }

		//Column
		public RuleCall getColumnsColumnParserRuleCall_2_7_3_0() { return cColumnsColumnParserRuleCall_2_7_3_0; }

		//")"
		public Keyword getRightParenthesisKeyword_2_8() { return cRightParenthesisKeyword_2_8; }

		//Space
		public RuleCall getSpaceParserRuleCall_2_9() { return cSpaceParserRuleCall_2_9; }

		//"VALUES"
		public Keyword getVALUESKeyword_2_10() { return cVALUESKeyword_2_10; }

		//Space
		public RuleCall getSpaceParserRuleCall_2_11() { return cSpaceParserRuleCall_2_11; }

		//"("
		public Keyword getLeftParenthesisKeyword_2_12() { return cLeftParenthesisKeyword_2_12; }

		//fields+=Field
		public Assignment getFieldsAssignment_2_13() { return cFieldsAssignment_2_13; }

		//Field
		public RuleCall getFieldsFieldParserRuleCall_2_13_0() { return cFieldsFieldParserRuleCall_2_13_0; }

		//(Space "," Space fields+=Field)*
		public Group getGroup_2_14() { return cGroup_2_14; }

		//Space
		public RuleCall getSpaceParserRuleCall_2_14_0() { return cSpaceParserRuleCall_2_14_0; }

		//","
		public Keyword getCommaKeyword_2_14_1() { return cCommaKeyword_2_14_1; }

		//Space
		public RuleCall getSpaceParserRuleCall_2_14_2() { return cSpaceParserRuleCall_2_14_2; }

		//fields+=Field
		public Assignment getFieldsAssignment_2_14_3() { return cFieldsAssignment_2_14_3; }

		//Field
		public RuleCall getFieldsFieldParserRuleCall_2_14_3_0() { return cFieldsFieldParserRuleCall_2_14_3_0; }

		//")"
		public Keyword getRightParenthesisKeyword_2_15() { return cRightParenthesisKeyword_2_15; }

		//other*
		public RuleCall getOtherParserRuleCall_3() { return cOtherParserRuleCall_3; }
	}

	public class DatabaseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Database");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cDatabaseAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValueIDTerminalRuleCall_2_0 = (RuleCall)cValueAssignment_2.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Database:
		//	{Database} "[" value=ID "]";
		public ParserRule getRule() { return rule; }

		//{Database} "[" value=ID "]"
		public Group getGroup() { return cGroup; }

		//{Database}
		public Action getDatabaseAction_0() { return cDatabaseAction_0; }

		//"["
		public Keyword getLeftSquareBracketKeyword_1() { return cLeftSquareBracketKeyword_1; }

		//value=ID
		public Assignment getValueAssignment_2() { return cValueAssignment_2; }

		//ID
		public RuleCall getValueIDTerminalRuleCall_2_0() { return cValueIDTerminalRuleCall_2_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_3() { return cRightSquareBracketKeyword_3; }
	}

	public class TabElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Tab");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cTabAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValueIDTerminalRuleCall_2_0 = (RuleCall)cValueAssignment_2.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Tab:
		//	{Tab} "[" value=ID "]";
		public ParserRule getRule() { return rule; }

		//{Tab} "[" value=ID "]"
		public Group getGroup() { return cGroup; }

		//{Tab}
		public Action getTabAction_0() { return cTabAction_0; }

		//"["
		public Keyword getLeftSquareBracketKeyword_1() { return cLeftSquareBracketKeyword_1; }

		//value=ID
		public Assignment getValueAssignment_2() { return cValueAssignment_2; }

		//ID
		public RuleCall getValueIDTerminalRuleCall_2_0() { return cValueIDTerminalRuleCall_2_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_3() { return cRightSquareBracketKeyword_3; }
	}

	public class ColumnElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Column");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cColumnAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValueIDTerminalRuleCall_2_0 = (RuleCall)cValueAssignment_2.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Column:
		//	{Column} "[" value=ID "]";
		public ParserRule getRule() { return rule; }

		//{Column} "[" value=ID "]"
		public Group getGroup() { return cGroup; }

		//{Column}
		public Action getColumnAction_0() { return cColumnAction_0; }

		//"["
		public Keyword getLeftSquareBracketKeyword_1() { return cLeftSquareBracketKeyword_1; }

		//value=ID
		public Assignment getValueAssignment_2() { return cValueAssignment_2; }

		//ID
		public RuleCall getValueIDTerminalRuleCall_2_0() { return cValueIDTerminalRuleCall_2_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_3() { return cRightSquareBracketKeyword_3; }
	}

	public class FieldElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Field");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cFieldAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cValueAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Alternatives cValueAlternatives_1_0 = (Alternatives)cValueAssignment_1.eContents().get(0);
		private final RuleCall cValueEStringParserRuleCall_1_0_0 = (RuleCall)cValueAlternatives_1_0.eContents().get(0);
		private final Alternatives cValueAlternatives_1_0_1 = (Alternatives)cValueAlternatives_1_0.eContents().get(1);
		private final RuleCall cValueN_SPEC_CHARTerminalRuleCall_1_0_1_0 = (RuleCall)cValueAlternatives_1_0_1.eContents().get(0);
		private final RuleCall cValueN_ESTRINGTerminalRuleCall_1_0_1_1 = (RuleCall)cValueAlternatives_1_0_1.eContents().get(1);
		private final RuleCall cValueCAST_HEXA_VALUE_TO_DATETIMETerminalRuleCall_1_0_2 = (RuleCall)cValueAlternatives_1_0.eContents().get(2);
		private final RuleCall cValueEStringAsIntParserRuleCall_1_0_3 = (RuleCall)cValueAlternatives_1_0.eContents().get(3);
		private final RuleCall cValueESTRING_AS_DOUBLETerminalRuleCall_1_0_4 = (RuleCall)cValueAlternatives_1_0.eContents().get(4);
		private final Keyword cValueNULLKeyword_1_0_5 = (Keyword)cValueAlternatives_1_0.eContents().get(5);
		
		//Field:
		//	{Field} value=(EString | (N_SPEC_CHAR | N_ESTRING) | CAST_HEXA_VALUE_TO_DATETIME | EStringAsInt | ESTRING_AS_DOUBLE |
		//	"NULL");
		public ParserRule getRule() { return rule; }

		//{Field} value=(EString | (N_SPEC_CHAR | N_ESTRING) | CAST_HEXA_VALUE_TO_DATETIME | EStringAsInt | ESTRING_AS_DOUBLE |
		//"NULL")
		public Group getGroup() { return cGroup; }

		//{Field}
		public Action getFieldAction_0() { return cFieldAction_0; }

		//value=(EString | (N_SPEC_CHAR | N_ESTRING) | CAST_HEXA_VALUE_TO_DATETIME | EStringAsInt | ESTRING_AS_DOUBLE | "NULL")
		public Assignment getValueAssignment_1() { return cValueAssignment_1; }

		//EString | (N_SPEC_CHAR | N_ESTRING) | CAST_HEXA_VALUE_TO_DATETIME | EStringAsInt | ESTRING_AS_DOUBLE | "NULL"
		public Alternatives getValueAlternatives_1_0() { return cValueAlternatives_1_0; }

		//EString
		public RuleCall getValueEStringParserRuleCall_1_0_0() { return cValueEStringParserRuleCall_1_0_0; }

		//N_SPEC_CHAR | N_ESTRING
		public Alternatives getValueAlternatives_1_0_1() { return cValueAlternatives_1_0_1; }

		//N_SPEC_CHAR
		public RuleCall getValueN_SPEC_CHARTerminalRuleCall_1_0_1_0() { return cValueN_SPEC_CHARTerminalRuleCall_1_0_1_0; }

		//N_ESTRING
		public RuleCall getValueN_ESTRINGTerminalRuleCall_1_0_1_1() { return cValueN_ESTRINGTerminalRuleCall_1_0_1_1; }

		//CAST_HEXA_VALUE_TO_DATETIME
		public RuleCall getValueCAST_HEXA_VALUE_TO_DATETIMETerminalRuleCall_1_0_2() { return cValueCAST_HEXA_VALUE_TO_DATETIMETerminalRuleCall_1_0_2; }

		//EStringAsInt
		public RuleCall getValueEStringAsIntParserRuleCall_1_0_3() { return cValueEStringAsIntParserRuleCall_1_0_3; }

		//ESTRING_AS_DOUBLE
		public RuleCall getValueESTRING_AS_DOUBLETerminalRuleCall_1_0_4() { return cValueESTRING_AS_DOUBLETerminalRuleCall_1_0_4; }

		//"NULL"
		public Keyword getValueNULLKeyword_1_0_5() { return cValueNULLKeyword_1_0_5; }
	}

	public class SpaceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Space");
		private final Keyword cSpaceKeyword = (Keyword)rule.eContents().get(1);
		
		//Space:
		//	" "*;
		public ParserRule getRule() { return rule; }

		//" "*
		public Keyword getSpaceKeyword() { return cSpaceKeyword; }
	}

	public class EStringAsIntElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EStringAsInt");
		private final RuleCall cINTTerminalRuleCall = (RuleCall)rule.eContents().get(1);
		
		//EStringAsInt returns ecore::EString:
		//	INT;
		public ParserRule getRule() { return rule; }

		//INT
		public RuleCall getINTTerminalRuleCall() { return cINTTerminalRuleCall; }
	}

	public class EStringElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EString");
		private final RuleCall cSTRINGTerminalRuleCall = (RuleCall)rule.eContents().get(1);
		
		//EString returns ecore::EString:
		//	STRING;
		public ParserRule getRule() { return rule; }

		//STRING
		public RuleCall getSTRINGTerminalRuleCall() { return cSTRINGTerminalRuleCall; }
	}

	public class OtherElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "other");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cML_COMMENTTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cOTHER_COMMANDTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//other: //	('/ *' (Space (ID|'['|']'|'.'))* '* /') 
		//	ML_COMMENT | //	( ('USE'|'SET'|'CREATE'|'ALTER') (Space (ID|'['|']'|'.'))* 'GO')
		//	OTHER_COMMAND;
		public ParserRule getRule() { return rule; }

		////	('/ *' (Space (ID|'['|']'|'.'))* '* /') 
		//ML_COMMENT | //	( ('USE'|'SET'|'CREATE'|'ALTER') (Space (ID|'['|']'|'.'))* 'GO')
		//OTHER_COMMAND
		public Alternatives getAlternatives() { return cAlternatives; }

		////	('/ *' (Space (ID|'['|']'|'.'))* '* /') 
		//ML_COMMENT
		public RuleCall getML_COMMENTTerminalRuleCall_0() { return cML_COMMENTTerminalRuleCall_0; }

		////	( ('USE'|'SET'|'CREATE'|'ALTER') (Space (ID|'['|']'|'.'))* 'GO')
		//OTHER_COMMAND
		public RuleCall getOTHER_COMMANDTerminalRuleCall_1() { return cOTHER_COMMANDTerminalRuleCall_1; }
	}
	
	
	private ModelElements pModel;
	private InsertSQLElements pInsertSQL;
	private DatabaseElements pDatabase;
	private TabElements pTab;
	private ColumnElements pColumn;
	private FieldElements pField;
	private SpaceElements pSpace;
	private EStringAsIntElements pEStringAsInt;
	private EStringElements pEString;
	private TerminalRule tESTRING_AS_DOUBLE;
	private TerminalRule tCAST_HEXA_VALUE_TO_DATETIME;
	private TerminalRule tN_ESTRING;
	private TerminalRule tN_SPEC_CHAR;
	private OtherElements pOther;
	private TerminalRule tOTHER_COMMAND;
	
	private final Grammar grammar;

	private TerminalsGrammarAccess gaTerminals;

	@Inject
	public SQLDSLGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("eu.artist.migration.mdt.database.sql.editor.SQLDSL".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	
	public Grammar getGrammar() {
		return grammar;
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Model:
	//	{Model} other* insertSQL+=InsertSQL*;
	public ModelElements getModelAccess() {
		return (pModel != null) ? pModel : (pModel = new ModelElements());
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}

	//InsertSQL:
	//	{InsertSQL} "INSERT" (Space database=Database "." tab=Tab Space "(" columns+=Column (Space "," Space
	//	columns+=Column)* ")" Space "VALUES" Space "(" fields+=Field (Space "," Space fields+=Field)* ")") other*;
	public InsertSQLElements getInsertSQLAccess() {
		return (pInsertSQL != null) ? pInsertSQL : (pInsertSQL = new InsertSQLElements());
	}
	
	public ParserRule getInsertSQLRule() {
		return getInsertSQLAccess().getRule();
	}

	//Database:
	//	{Database} "[" value=ID "]";
	public DatabaseElements getDatabaseAccess() {
		return (pDatabase != null) ? pDatabase : (pDatabase = new DatabaseElements());
	}
	
	public ParserRule getDatabaseRule() {
		return getDatabaseAccess().getRule();
	}

	//Tab:
	//	{Tab} "[" value=ID "]";
	public TabElements getTabAccess() {
		return (pTab != null) ? pTab : (pTab = new TabElements());
	}
	
	public ParserRule getTabRule() {
		return getTabAccess().getRule();
	}

	//Column:
	//	{Column} "[" value=ID "]";
	public ColumnElements getColumnAccess() {
		return (pColumn != null) ? pColumn : (pColumn = new ColumnElements());
	}
	
	public ParserRule getColumnRule() {
		return getColumnAccess().getRule();
	}

	//Field:
	//	{Field} value=(EString | (N_SPEC_CHAR | N_ESTRING) | CAST_HEXA_VALUE_TO_DATETIME | EStringAsInt | ESTRING_AS_DOUBLE |
	//	"NULL");
	public FieldElements getFieldAccess() {
		return (pField != null) ? pField : (pField = new FieldElements());
	}
	
	public ParserRule getFieldRule() {
		return getFieldAccess().getRule();
	}

	//Space:
	//	" "*;
	public SpaceElements getSpaceAccess() {
		return (pSpace != null) ? pSpace : (pSpace = new SpaceElements());
	}
	
	public ParserRule getSpaceRule() {
		return getSpaceAccess().getRule();
	}

	//EStringAsInt returns ecore::EString:
	//	INT;
	public EStringAsIntElements getEStringAsIntAccess() {
		return (pEStringAsInt != null) ? pEStringAsInt : (pEStringAsInt = new EStringAsIntElements());
	}
	
	public ParserRule getEStringAsIntRule() {
		return getEStringAsIntAccess().getRule();
	}

	//EString returns ecore::EString:
	//	STRING;
	public EStringElements getEStringAccess() {
		return (pEString != null) ? pEString : (pEString = new EStringElements());
	}
	
	public ParserRule getEStringRule() {
		return getEStringAccess().getRule();
	}

	//terminal ESTRING_AS_DOUBLE:
	//	"0".."9"+ "." "0".."9"+;
	public TerminalRule getESTRING_AS_DOUBLERule() {
		return (tESTRING_AS_DOUBLE != null) ? tESTRING_AS_DOUBLE : (tESTRING_AS_DOUBLE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "ESTRING_AS_DOUBLE"));
	} 

	//terminal CAST_HEXA_VALUE_TO_DATETIME:
	//	"CAST(" "0" ("x" | "X") ("0".."9" | "a".."f" | "A".."F")+ " "* "AS" " "* "DateTime)";
	public TerminalRule getCAST_HEXA_VALUE_TO_DATETIMERule() {
		return (tCAST_HEXA_VALUE_TO_DATETIME != null) ? tCAST_HEXA_VALUE_TO_DATETIME : (tCAST_HEXA_VALUE_TO_DATETIME = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "CAST_HEXA_VALUE_TO_DATETIME"));
	} 

	//terminal N_ESTRING:
	//	"N" STRING;
	public TerminalRule getN_ESTRINGRule() {
		return (tN_ESTRING != null) ? tN_ESTRING : (tN_ESTRING = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "N_ESTRING"));
	} 

	//terminal N_SPEC_CHAR:
	//	"N\'" ("a".."z" | "A".."Z" | "0".."9" | "-" | "\\")+ "\'" | "\"" ("a".."z" | "A".."Z" | "0".."9" | "-" | "\\")+ "\"";
	public TerminalRule getN_SPEC_CHARRule() {
		return (tN_SPEC_CHAR != null) ? tN_SPEC_CHAR : (tN_SPEC_CHAR = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "N_SPEC_CHAR"));
	} 

	//other: //	('/ *' (Space (ID|'['|']'|'.'))* '* /') 
	//	ML_COMMENT | //	( ('USE'|'SET'|'CREATE'|'ALTER') (Space (ID|'['|']'|'.'))* 'GO')
	//	OTHER_COMMAND;
	public OtherElements getOtherAccess() {
		return (pOther != null) ? pOther : (pOther = new OtherElements());
	}
	
	public ParserRule getOtherRule() {
		return getOtherAccess().getRule();
	}

	//terminal OTHER_COMMAND:
	//	("USE" | "SET" | "CREATE" | "ALTER")->"GO" | "GO" | ("print" " "* STRING)*;
	public TerminalRule getOTHER_COMMANDRule() {
		return (tOTHER_COMMAND != null) ? tOTHER_COMMAND : (tOTHER_COMMAND = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "OTHER_COMMAND"));
	} 

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	} 

	//terminal STRING:
	//	"\"" ("\\" ("b" | "t" | "n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\""))* "\"" | "\'" ("\\" ("b" | "t" |
	//	"n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
