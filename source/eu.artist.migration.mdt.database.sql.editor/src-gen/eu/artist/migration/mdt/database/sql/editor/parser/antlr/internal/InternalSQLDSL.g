/*
* generated by Xtext
*/
grammar InternalSQLDSL;

options {
	superClass=AbstractInternalAntlrParser;
	
}

@lexer::header {
package eu.artist.migration.mdt.database.sql.editor.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package eu.artist.migration.mdt.database.sql.editor.parser.antlr.internal; 

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import eu.artist.migration.mdt.database.sql.editor.services.SQLDSLGrammarAccess;

}

@parser::members {

 	private SQLDSLGrammarAccess grammarAccess;
 	
    public InternalSQLDSLParser(TokenStream input, SQLDSLGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }
    
    @Override
    protected String getFirstRuleName() {
    	return "Model";	
   	}
   	
   	@Override
   	protected SQLDSLGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}
}

@rulecatch { 
    catch (RecognitionException re) { 
        recover(input,re); 
        appendSkippedTokens();
    } 
}




// Entry rule entryRuleModel
entryRuleModel returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getModelRule()); }
	 iv_ruleModel=ruleModel 
	 { $current=$iv_ruleModel.current; } 
	 EOF 
;

// Rule Model
ruleModel returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getModelAccess().getModelAction_0(),
            $current);
    }
)(
    { 
        newCompositeNode(grammarAccess.getModelAccess().getOtherParserRuleCall_1()); 
    }
ruleother
    { 
        afterParserOrEnumRuleCall();
    }
)*(
(
		{ 
	        newCompositeNode(grammarAccess.getModelAccess().getInsertSQLInsertSQLParserRuleCall_2_0()); 
	    }
		lv_insertSQL_2_0=ruleInsertSQL		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getModelRule());
	        }
       		add(
       			$current, 
       			"insertSQL",
        		lv_insertSQL_2_0, 
        		"InsertSQL");
	        afterParserOrEnumRuleCall();
	    }

)
)*)
;





// Entry rule entryRuleInsertSQL
entryRuleInsertSQL returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getInsertSQLRule()); }
	 iv_ruleInsertSQL=ruleInsertSQL 
	 { $current=$iv_ruleInsertSQL.current; } 
	 EOF 
;

// Rule InsertSQL
ruleInsertSQL returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getInsertSQLAccess().getInsertSQLAction_0(),
            $current);
    }
)	otherlv_1='INSERT' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getInsertSQLAccess().getINSERTKeyword_1());
    }
(
    { 
        newCompositeNode(grammarAccess.getInsertSQLAccess().getSpaceParserRuleCall_2_0()); 
    }
ruleSpace
    { 
        afterParserOrEnumRuleCall();
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getInsertSQLAccess().getDatabaseDatabaseParserRuleCall_2_1_0()); 
	    }
		lv_database_3_0=ruleDatabase		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getInsertSQLRule());
	        }
       		set(
       			$current, 
       			"database",
        		lv_database_3_0, 
        		"Database");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_4='.' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getInsertSQLAccess().getFullStopKeyword_2_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getInsertSQLAccess().getTabTabParserRuleCall_2_3_0()); 
	    }
		lv_tab_5_0=ruleTab		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getInsertSQLRule());
	        }
       		set(
       			$current, 
       			"tab",
        		lv_tab_5_0, 
        		"Tab");
	        afterParserOrEnumRuleCall();
	    }

)
)
    { 
        newCompositeNode(grammarAccess.getInsertSQLAccess().getSpaceParserRuleCall_2_4()); 
    }
ruleSpace
    { 
        afterParserOrEnumRuleCall();
    }
	otherlv_7='(' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getInsertSQLAccess().getLeftParenthesisKeyword_2_5());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getInsertSQLAccess().getColumnsColumnParserRuleCall_2_6_0()); 
	    }
		lv_columns_8_0=ruleColumn		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getInsertSQLRule());
	        }
       		add(
       			$current, 
       			"columns",
        		lv_columns_8_0, 
        		"Column");
	        afterParserOrEnumRuleCall();
	    }

)
)(
    { 
        newCompositeNode(grammarAccess.getInsertSQLAccess().getSpaceParserRuleCall_2_7_0()); 
    }
ruleSpace
    { 
        afterParserOrEnumRuleCall();
    }
	otherlv_10=',' 
    {
    	newLeafNode(otherlv_10, grammarAccess.getInsertSQLAccess().getCommaKeyword_2_7_1());
    }

    { 
        newCompositeNode(grammarAccess.getInsertSQLAccess().getSpaceParserRuleCall_2_7_2()); 
    }
ruleSpace
    { 
        afterParserOrEnumRuleCall();
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getInsertSQLAccess().getColumnsColumnParserRuleCall_2_7_3_0()); 
	    }
		lv_columns_12_0=ruleColumn		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getInsertSQLRule());
	        }
       		add(
       			$current, 
       			"columns",
        		lv_columns_12_0, 
        		"Column");
	        afterParserOrEnumRuleCall();
	    }

)
))*	otherlv_13=')' 
    {
    	newLeafNode(otherlv_13, grammarAccess.getInsertSQLAccess().getRightParenthesisKeyword_2_8());
    }

    { 
        newCompositeNode(grammarAccess.getInsertSQLAccess().getSpaceParserRuleCall_2_9()); 
    }
ruleSpace
    { 
        afterParserOrEnumRuleCall();
    }
	otherlv_15='VALUES' 
    {
    	newLeafNode(otherlv_15, grammarAccess.getInsertSQLAccess().getVALUESKeyword_2_10());
    }

    { 
        newCompositeNode(grammarAccess.getInsertSQLAccess().getSpaceParserRuleCall_2_11()); 
    }
ruleSpace
    { 
        afterParserOrEnumRuleCall();
    }
	otherlv_17='(' 
    {
    	newLeafNode(otherlv_17, grammarAccess.getInsertSQLAccess().getLeftParenthesisKeyword_2_12());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getInsertSQLAccess().getFieldsFieldParserRuleCall_2_13_0()); 
	    }
		lv_fields_18_0=ruleField		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getInsertSQLRule());
	        }
       		add(
       			$current, 
       			"fields",
        		lv_fields_18_0, 
        		"Field");
	        afterParserOrEnumRuleCall();
	    }

)
)(
    { 
        newCompositeNode(grammarAccess.getInsertSQLAccess().getSpaceParserRuleCall_2_14_0()); 
    }
ruleSpace
    { 
        afterParserOrEnumRuleCall();
    }
	otherlv_20=',' 
    {
    	newLeafNode(otherlv_20, grammarAccess.getInsertSQLAccess().getCommaKeyword_2_14_1());
    }

    { 
        newCompositeNode(grammarAccess.getInsertSQLAccess().getSpaceParserRuleCall_2_14_2()); 
    }
ruleSpace
    { 
        afterParserOrEnumRuleCall();
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getInsertSQLAccess().getFieldsFieldParserRuleCall_2_14_3_0()); 
	    }
		lv_fields_22_0=ruleField		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getInsertSQLRule());
	        }
       		add(
       			$current, 
       			"fields",
        		lv_fields_22_0, 
        		"Field");
	        afterParserOrEnumRuleCall();
	    }

)
))*	otherlv_23=')' 
    {
    	newLeafNode(otherlv_23, grammarAccess.getInsertSQLAccess().getRightParenthesisKeyword_2_15());
    }
)(
    { 
        newCompositeNode(grammarAccess.getInsertSQLAccess().getOtherParserRuleCall_3()); 
    }
ruleother
    { 
        afterParserOrEnumRuleCall();
    }
)*)
;





// Entry rule entryRuleDatabase
entryRuleDatabase returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getDatabaseRule()); }
	 iv_ruleDatabase=ruleDatabase 
	 { $current=$iv_ruleDatabase.current; } 
	 EOF 
;

// Rule Database
ruleDatabase returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getDatabaseAccess().getDatabaseAction_0(),
            $current);
    }
)	otherlv_1='[' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getDatabaseAccess().getLeftSquareBracketKeyword_1());
    }
(
(
		lv_value_2_0=RULE_ID
		{
			newLeafNode(lv_value_2_0, grammarAccess.getDatabaseAccess().getValueIDTerminalRuleCall_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getDatabaseRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"value",
        		lv_value_2_0, 
        		"ID");
	    }

)
)	otherlv_3=']' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getDatabaseAccess().getRightSquareBracketKeyword_3());
    }
)
;





// Entry rule entryRuleTab
entryRuleTab returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getTabRule()); }
	 iv_ruleTab=ruleTab 
	 { $current=$iv_ruleTab.current; } 
	 EOF 
;

// Rule Tab
ruleTab returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getTabAccess().getTabAction_0(),
            $current);
    }
)	otherlv_1='[' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getTabAccess().getLeftSquareBracketKeyword_1());
    }
(
(
		lv_value_2_0=RULE_ID
		{
			newLeafNode(lv_value_2_0, grammarAccess.getTabAccess().getValueIDTerminalRuleCall_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getTabRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"value",
        		lv_value_2_0, 
        		"ID");
	    }

)
)	otherlv_3=']' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getTabAccess().getRightSquareBracketKeyword_3());
    }
)
;





// Entry rule entryRuleColumn
entryRuleColumn returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getColumnRule()); }
	 iv_ruleColumn=ruleColumn 
	 { $current=$iv_ruleColumn.current; } 
	 EOF 
;

// Rule Column
ruleColumn returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getColumnAccess().getColumnAction_0(),
            $current);
    }
)	otherlv_1='[' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getColumnAccess().getLeftSquareBracketKeyword_1());
    }
(
(
		lv_value_2_0=RULE_ID
		{
			newLeafNode(lv_value_2_0, grammarAccess.getColumnAccess().getValueIDTerminalRuleCall_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getColumnRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"value",
        		lv_value_2_0, 
        		"ID");
	    }

)
)	otherlv_3=']' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getColumnAccess().getRightSquareBracketKeyword_3());
    }
)
;





// Entry rule entryRuleField
entryRuleField returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getFieldRule()); }
	 iv_ruleField=ruleField 
	 { $current=$iv_ruleField.current; } 
	 EOF 
;

// Rule Field
ruleField returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getFieldAccess().getFieldAction_0(),
            $current);
    }
)(
(
(
		{ 
	        newCompositeNode(grammarAccess.getFieldAccess().getValueEStringParserRuleCall_1_0_0()); 
	    }
		lv_value_1_1=ruleEString		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFieldRule());
	        }
       		set(
       			$current, 
       			"value",
        		lv_value_1_1, 
        		"EString");
	        afterParserOrEnumRuleCall();
	    }

    |(
		lv_value_1_3=RULE_N_SPEC_CHAR
		{
			newLeafNode(lv_value_1_3, grammarAccess.getFieldAccess().getValueN_SPEC_CHARTerminalRuleCall_1_0_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getFieldRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"value",
        		lv_value_1_3, 
        		"N_SPEC_CHAR");
	    }

    |		lv_value_1_4=RULE_N_ESTRING
		{
			newLeafNode(lv_value_1_4, grammarAccess.getFieldAccess().getValueN_ESTRINGTerminalRuleCall_1_0_1_1()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getFieldRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"value",
        		lv_value_1_4, 
        		"N_ESTRING");
	    }

)

    |		lv_value_1_5=RULE_CAST_HEXA_VALUE_TO_DATETIME
		{
			newLeafNode(lv_value_1_5, grammarAccess.getFieldAccess().getValueCAST_HEXA_VALUE_TO_DATETIMETerminalRuleCall_1_0_2()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getFieldRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"value",
        		lv_value_1_5, 
        		"CAST_HEXA_VALUE_TO_DATETIME");
	    }

    |		{ 
	        newCompositeNode(grammarAccess.getFieldAccess().getValueEStringAsIntParserRuleCall_1_0_3()); 
	    }
		lv_value_1_6=ruleEStringAsInt		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFieldRule());
	        }
       		set(
       			$current, 
       			"value",
        		lv_value_1_6, 
        		"EStringAsInt");
	        afterParserOrEnumRuleCall();
	    }

    |		lv_value_1_7=RULE_ESTRING_AS_DOUBLE
		{
			newLeafNode(lv_value_1_7, grammarAccess.getFieldAccess().getValueESTRING_AS_DOUBLETerminalRuleCall_1_0_4()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getFieldRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"value",
        		lv_value_1_7, 
        		"ESTRING_AS_DOUBLE");
	    }

    |		lv_value_1_8=	'NULL' 
    {
        newLeafNode(lv_value_1_8, grammarAccess.getFieldAccess().getValueNULLKeyword_1_0_5());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getFieldRule());
	        }
       		setWithLastConsumed($current, "value", lv_value_1_8, null);
	    }

)

)
))
;





// Entry rule entryRuleSpace
entryRuleSpace returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getSpaceRule()); } 
	 iv_ruleSpace=ruleSpace 
	 { $current=$iv_ruleSpace.current.getText(); }  
	 EOF 
;

// Rule Space
ruleSpace returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw=' ' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getSpaceAccess().getSpaceKeyword()); 
    }
)*
    ;





// Entry rule entryRuleEStringAsInt
entryRuleEStringAsInt returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getEStringAsIntRule()); } 
	 iv_ruleEStringAsInt=ruleEStringAsInt 
	 { $current=$iv_ruleEStringAsInt.current.getText(); }  
	 EOF 
;

// Rule EStringAsInt
ruleEStringAsInt returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
    this_INT_0=RULE_INT    {
		$current.merge(this_INT_0);
    }

    { 
    newLeafNode(this_INT_0, grammarAccess.getEStringAsIntAccess().getINTTerminalRuleCall()); 
    }

    ;





// Entry rule entryRuleEString
entryRuleEString returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getEStringRule()); } 
	 iv_ruleEString=ruleEString 
	 { $current=$iv_ruleEString.current.getText(); }  
	 EOF 
;

// Rule EString
ruleEString returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
    this_STRING_0=RULE_STRING    {
		$current.merge(this_STRING_0);
    }

    { 
    newLeafNode(this_STRING_0, grammarAccess.getEStringAccess().getSTRINGTerminalRuleCall()); 
    }

    ;





// Entry rule entryRuleother
entryRuleother returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getOtherRule()); } 
	 iv_ruleother=ruleother 
	 { $current=$iv_ruleother.current.getText(); }  
	 EOF 
;

// Rule other
ruleother returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(    this_ML_COMMENT_0=RULE_ML_COMMENT    {
		$current.merge(this_ML_COMMENT_0);
    }

    { 
    newLeafNode(this_ML_COMMENT_0, grammarAccess.getOtherAccess().getML_COMMENTTerminalRuleCall_0()); 
    }

    |    this_OTHER_COMMAND_1=RULE_OTHER_COMMAND    {
		$current.merge(this_OTHER_COMMAND_1);
    }

    { 
    newLeafNode(this_OTHER_COMMAND_1, grammarAccess.getOtherAccess().getOTHER_COMMANDTerminalRuleCall_1()); 
    }
)
    ;





RULE_ESTRING_AS_DOUBLE : ('0'..'9')+ '.' ('0'..'9')+;

RULE_CAST_HEXA_VALUE_TO_DATETIME : 'CAST(' '0' ('x'|'X') ('0'..'9'|'a'..'f'|'A'..'F')+ ' '* 'AS' ' '* 'DateTime)';

RULE_N_ESTRING : 'N' RULE_STRING;

RULE_N_SPEC_CHAR : ('N\'' ('a'..'z'|'A'..'Z'|'0'..'9'|'-'|'\\')+ '\''|'"' ('a'..'z'|'A'..'Z'|'0'..'9'|'-'|'\\')+ '"');

RULE_OTHER_COMMAND : (('USE'|'SET'|'CREATE'|'ALTER') ( options {greedy=false;} : . )*'GO'|'GO'|('print' ' '* RULE_STRING)*);

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'"')))* '"'|'\'' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


